# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  subscription : 'serviceconnectionname'  #replace with your service connection name
  SQLserver: 'nextopssqls99.database.windows.net'
  DatabaseName: 'mhcdb'
  SQLuser: 'sqladmin'
  SQLpassword: 'P2ssw0rd1234'
  ACR: 'nextopsacr99.azurecr.io'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: qetza.replacetokens.replacetokens-task.replacetokens@5
      displayName: 'Replace tokens in appsettings.json'
      inputs:
        rootDirectory: '$(build.sourcesdirectory)/src/MyHealth.Web'
        targetFiles: appsettings.json
        tokenPattern: rm
        escapeType: none

    - task: qetza.replacetokens.replacetokens-task.replacetokens@5
      displayName: 'Replace tokens in mhc-aks.yaml'
      inputs:
        rootDirectory: '$(build.sourcesdirectory)'
        targetFiles: 'mhc-aks.yaml'
        tokenPattern: rm
        escapeType: none

    - task: DockerCompose@0
      displayName: 'Run services'
      inputs:
        azureSubscription: $(subscription)
        azureContainerRegistry: '{"loginServer":"nextopsacr99.azurecr.io", "id" : "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx/resourceGroups/NextOps/providers/Microsoft.ContainerRegistry/registries/nextopsacr99"}'
        dockerComposeFile: 'docker-compose.ci.build.yml'
        action: 'Run services'
        detached: false

    - task: DockerCompose@0
      displayName: 'Build services'
      inputs:
        azureSubscription: $(subscription)
        azureContainerRegistry: '{"loginServer":"nextopsacr99.azurecr.io", "id" : "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx/resourceGroups/NextOps/providers/Microsoft.ContainerRegistry/registries/nextopsacr99"}'
        dockerComposeFile: 'docker-compose.yml'
        dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
        action: 'Build services'
        additionalImageTags: '$(Build.BuildId)'

    - task: DockerCompose@0
      displayName: 'Push services'
      inputs:
        azureSubscription: $(subscription)
        azureContainerRegistry: '{"loginServer":"nextopsacr99.azurecr.io", "id" : "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx/resourceGroups/NextOps/providers/Microsoft.ContainerRegistry/registries/nextopsacr99"}'
        dockerComposeFile: 'docker-compose.yml'
        dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
        action: 'Push services'
        additionalImageTags: '$(Build.BuildId)'

    - task: DockerCompose@0
      displayName: 'Lock services'
      inputs:
        azureSubscription: $(subscription)
        azureContainerRegistry: '{"loginServer":"nextopsacr99.azurecr.io", "id" : "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx/resourceGroups/NextOps/providers/Microsoft.ContainerRegistry/registries/nextopsacr99"}'
        dockerComposeFile: 'docker-compose.yml'
        dockerComposeFileArgs: 'DOCKER_BUILD_SOURCE='
        action: 'Lock services'

    - task: CopyFiles@2
      displayName: 'Copy Files'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: |
          **/mhc-aks.yaml
          **/*.dacpac
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        ArtifactName: deploy

- stage: Dev
  displayName: Dev stage
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - deployment: DB 
    displayName: 'DB Deployment'
    environment: 'development'
    pool: 
      vmImage: 'windows-2019'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Execute Azure SQL : DacpacTask'
            inputs:
              azureSubscription: $(subscription)
              AuthenticationType: 'server'
              ServerName: '$(SQLserver)'
              DatabaseName: '$(DatabaseName)'
              SqlUsername: '$(SQLuser)'
              SqlPassword: '$(SQLpassword)'
              deployType: 'DacpacTask'
              DeploymentAction: 'Publish'
              DacpacFile: '$(Agent.BuildDirectory)/**/*.dacpac'
              IpDetectionMethod: 'IPAddressRange'
              StartIpAddress: '0.0.0.0'
              EndIpAddress: '255.255.255.255'

  - deployment: AKS
    displayName: 'AKS Deployment'
    environment: 'development'
    pool: 
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            displayName: 'Create Deployments & Services in AKS'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(subscription)
              azureResourceGroup: 'NextOps'
              kubernetesCluster: 'NextOpsAKS01'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(Agent.BuildDirectory)/deploy/mhc-aks.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              azureSubscriptionEndpointForSecrets: $(subscription)
              azureContainerRegistry: '$(ACR)'
              secretName: 'mysecretkey'
              versionSpec: '1.8.1'
              checkLatest: true
          
          - task: Kubernetes@1
            displayName: 'Update image in AKS'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: $(subscription)
              azureResourceGroup: NextOps
              kubernetesCluster: NextOpsAKS01
              command: set
              arguments: 'image deployments/mhc-front mhc-front=$(ACR)/myhealth.web:$(Build.BuildId)'
              azureSubscriptionEndpointForSecrets: $(subscription)
              azureContainerRegistry: '$(ACR)'
              secretName: mysecretkey
              versionSpec: 1.8.1
              checkLatest: true
